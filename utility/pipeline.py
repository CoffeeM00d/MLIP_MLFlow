# This file is designed based on MlFlow tutorial
# https://mlflow.org/docs/latest/getting-started/intro-quickstart/index.html


from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.tree import DecisionTreeClassifier

import numpy as np
import pandas as pd

def generate_model_name(name: str = "", params = None) -> str:
    params = params if params is not None else {
        "solver": "lbfgs",
        "max_iter": 1000,
        "multi_class": "auto",
        "random_state": 8888,
    }
    return name if len(name) > 0 else "IRIS_Model_" + str(hash(str(params))%1000)

def data_preprocessing()-> tuple[np.ndarray]:
    """Generate IRIS dataset's train and test dataset

    Returns:
        Tuple[np.ndarray]: X_train, X_test, y_train, y_test generated by sklearn
        train_test_split function.
    """
    # Load the Iris dataset
    X, y = datasets.load_iris(return_X_y=True)

    # Split the data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    return X_train, X_test, y_train, y_test

def train_logistic_regression(
    X_train:np.ndarray, 
    y_train:np.ndarray,
    params: dict,
    ) -> LogisticRegression:
    """Function that generates a trained logistic regression model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim)
        X_test (np.ndarray): Test dataset of shape (data point num, 1)

    Returns:
        LogisticRegres# Start an MLflow run
with mlflow.start_run():
    # Log the hyperparameters
    mlflow.log_params(params)

    # Log the loss metric
    mlflow.log_metric("accuracy", accuracy)

    # Set a tag that we can use to remind ourselves what this run was for
    mlflow.set_tag("Training Info", "Basic LR model for iris data")

    # Infer the model signature
    signature = infer_signature(X_train, lr.predict(X_train))

    # Log the model
    model_info = mlflow.sklearn.log_model(
        sk_model=lr,
        artifact_path="iris_model",
        signature=signature,
        input_example=X_train,
        registered_model_name="tracking-quickstart",
    )sion: Trained sklearn logistic regression model
    """
    # Train the model
    lr = LogisticRegression(**params)
    lr.fit(X_train, y_train)
    return lr

def train_random_forest_classifier(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42}
) -> RandomForestClassifier:
    """Function that generates a trained random forest classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim) 
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest classifier

    Returns:
        RandomForestClassifier: Trained sklearn random forest model
    """
    rf = RandomForestClassifier(**params)
    rf.fit(X_train, y_train)
    return rf

def train_random_forest_regressor(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"n_estimators": 100, "random_state": 42}
) -> RandomForestRegressor:
    """Function that generates a trained random forest classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim) 
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the random forest classifier

    Returns:
        RandomForestClassifier: Trained sklearn random forest model
    """
    rf = RandomForestRegressor(**params)
    rf.fit(X_train, y_train)
    return rf

def train_decision_tree_classifier(
    X_train: np.ndarray,
    y_train: np.ndarray,
    params: dict = {"random_state": 42}
) -> DecisionTreeClassifier:
    """Function that generates a trained decision tree classifier model
    based on the training dataset and hyperparameters.

    Args:
        X_train (np.ndarray): Training dataset of shape (data point num, feature dim) 
        y_train (np.ndarray): Training labels of shape (data point num, 1)
        params (dict): Parameters for the decision tree classifier

    Returns:
        RandomForestClassifier: Trained sklearn decision tree model
    """
    rf = DecisionTreeClassifier(**params)
    rf.fit(X_train, y_train)
    return rf

def evaluation(
    model: LogisticRegression,
    X_test:np.ndarray, 
    y_test:np.ndarray,
) -> float:
    """evaluate the accuracy of the trained model

    Args:
        model (LogisticRegression): trained model object
        y_train (np.ndarray): test features
        y_test (np.ndarray): test labels

    Returns:
        float: accuracy of the trained model
    """
    # Predict on the test set
    y_pred = model.predict(X_test)

    # Calculate metrics
    accuracy = accuracy_score(y_test, y_pred)

    return accuracy

    